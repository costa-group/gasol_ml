test.py -ds 1 -ts 0 -e 10 -lr 0.001 -lf ce -dt seq -lt cl

machine: costa2

The model used

class Model_3(torch.nn.Module):
    def __init__(self, hidden_channels, out_channels, vocab_size, embed_dim=16):
        super(Model_3, self).__init__()
        self.emb = Embedding(vocab_size, embed_dim, padding_idx=0) # we assume 0 was used for padding sequences
        self.rnn = LSTM(embed_dim, hidden_channels, 1)
        self.lin = Linear(hidden_channels, out_channels)
        self.lin1 = Linear(hidden_channels, hidden_channels)
        self.lin2 = Linear(hidden_channels, hidden_channels)

    def forward(self, data):

        x, lengths = data[2], data[4]

        # embedding of the tokens into a relatively small dimensional space
        x = self.emb(x)

        # pack all sequences (they are assumed to be padded and sorted by length)
        x = torch.nn.utils.rnn.pack_padded_sequence(x, lengths=lengths, batch_first=True)

        # 1. Obtain node embeddings 
        output, (x, cn) = self.rnn(x)
#        output, x = self.rnn(x)

        # take the last output 
        x = x[0]

        x = F.dropout(x, p=0.5, training=self.training)

        x = self.lin1(x)
        x = x.relu()
        x = self.lin2(x)
        x = x.relu()

        x = self.lin(x)

        return x

