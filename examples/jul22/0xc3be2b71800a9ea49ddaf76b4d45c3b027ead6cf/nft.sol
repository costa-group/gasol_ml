// ..............................................................................................................
// ..............................................................................................................
// ..............................................................................................................
// ..................................................................................................
// ......................................................::......::::8............................
// ..............::.   ....::0..................................::....::::::::::8..........................
// ............::,..   ......::0..............................::....::::::::::::8..........................
// ..............    LLLLLL::::::0..........................::....::::::::::::::::8........................
// ..........::....fLiiiiii11::::::0......................::......::::::::::::::::8........................
// ................:iiiiiiiii11::::::0..........................::::::::::::::::::8........................
// ..............::....iiiiiiii11::::::0................::....::::::::::::::::::::8........................
// ........................iiiiii11::::::0::::::::::::::::8........................
// ..........................iiiiii11::........GGGGGGGGGGGG::::::::::::8........................
// ............................iiiiLL....GGGGGGGGGG          GGGGGG::::::::::8........................
// ..............................iiLLGGGGGG          ;;;;;;;;;;;;GGGGGG::::::::8........................
// ..............................GGCC      ;;;;;;;;;;;;;;;;;;;;;;;;GGGGCC::::::8........................
// ..........................GGGGGGCC;;;;;;;;;;;;;;;;;;;;;;CCCCCCCC::8........................
// ..............::........GGGGGGGGGGGGCCCCCCCCCCCCCCCCCC::8........................
// ..............::....GGGGGGGGGGGGGG::8........................
// ..........  ....GGGGGGGGGGGGCCCCCCff....::..88::8........................
// ..........::GGGGGGGGCCCCCCCC    ......::..  ;;88..........................
// ............CCCCCCCCCCCC::;;    ;;......::..;f    ;;..........................
// ........................ff;;;;....            ..ff;;;;........................
// ............:::ttttt::........::  ff;;;;ff::........::::...:  ff;;;;ff........................
// ............::ii::::..............tt0;;ff11::..................::0ffffff::8........................
// ............::::::..............LLff::0::......................::0::..........................
// ............::::..............ttff....::::ttff...................................:........................
// ............::::............LLff......:iLLff..................................tt:i........................
// ............::............LLtt........ttff::::........::0::......::::........................
// ............::......tttt............LL................000GGGGffff00..............................
// ............::......tLLL..................::::::......GGGGGG....::::::............  ......
// ............................................::::......::0::....::::............  ........
// ........................................................::0::....................::  ........
// ................::ittt........tt::......................................................    ........
// ..............::;t::tLtt......tLtt......................................................  ::........
// ..............ittLtttLLL..........................::..............::............  ..........
// ..........::..tLLLLLLLLL............................::::;t::::::::..0............  ..........
// ................tLLLLL......................................::        ::....................
// ..............................tttttt............................::          ::  ....................
// ............................tttLLL::it....::........................::        11LL::................
// ............................tLLLLLtttL::....::::......................::    LLLL::11::................
// ..............LLLL::........tLLLLLLLLLtt........::::::::;ttttttttttttt:i::  11LL..................
// ............LLtLGGLL::......::tLLLLLLLLL..........::1111:::::::::::::::::i..........................
// ............LGGGGGGGLL::......::tLLLLL..........tt;1::::::::::::::::::::::................................
// ............LGGGGGGGGGLL......................tt::::::::::::::::::::::::::................................
// ............LGGGGGGGGGGG......................::::::::::::::::::::::::::::................................
// ..............LGGGGGGG......................::::LLLL::::::::::::::::::LL::................................
// ........::::................LLLLLL::........::::LCCC::::::::::::::::::::::................................
// ........::::..............::tGGGGGLL::......::::::::::::::LLLLLLLL::::::::::..............................
// ..........:;::............tLLGGGGGGGLL......::::::::::::LLLCCCCCCCLL::::::::..............................
// .........:::;1::..........LGGGGGGGGGGG....::::::::::::LLLCCCCCCCCCCC::::::::::............................

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./ERC721A.sol";
import "./Ownable.sol";

contract Moonhunters is ERC721A, Ownable {
    using Strings for uint256;

    uint256 public maxSupply = 2200;

    uint256 public maxFreeAmount = 1000;

    uint256 public maxFreePerWallet = 1;

    uint256 public maxFreePerTx = 1;

    uint256 public price = 0.005 ether;

    uint256 public maxPerTx = 5;

    string public baseURI;

    bool public mintEnabled;

    mapping(address => uint256) private _mintedFreeAmount;

    constructor() ERC721A("Moonhunters", "Moonhunters") {
        _safeMint(msg.sender, 10);
    }

    function mint(uint256 amount) external payable {
        uint256 cost = price;
        uint256 num = amount > 0 ? amount : 1;
        bool free = ((totalSupply() + num < maxFreeAmount + 1) &&
            (_mintedFreeAmount[msg.sender] + num <= maxFreePerWallet));
        if (free) {
            cost = 0;
            _mintedFreeAmount[msg.sender] += num;
            require(num < maxFreePerTx + 1, "Max per TX reached.");
        } else {
            require(num < maxPerTx + 1, "Max per TX reached.");
        }

        require(mintEnabled, "Minting is not live yet.");
        require(msg.value >= num * cost, "Please send the exact amount.");
        require(totalSupply() + num < maxSupply + 1, "No more");

        _safeMint(msg.sender, num);
    }

    function _baseURI() internal view virtual override returns (string memory) {
        return baseURI;
    }

    function tokenURI(uint256 tokenId)
        public
        view
        virtual
        override
        returns (string memory)
    {
        require(
            _exists(tokenId),
            "ERC721Metadata: URI query for nonexistent token"
        );
        return string(abi.encodePacked(baseURI, tokenId.toString(), ".json"));
    }

    function setBaseURI(string memory uri) public onlyOwner {
        baseURI = uri;
    }

    function setPrice(uint256 _newPrice) external onlyOwner {
        price = _newPrice;
    }

    function setMaxPerTx(uint256 _amount) external onlyOwner {
        maxPerTx = _amount;
    }

    function setMaxFreeAmount(uint256 _amount) external onlyOwner {
        maxFreeAmount = _amount;
    }

    function setMaxFreePerWallet(uint256 _amount) external onlyOwner {
        maxFreePerWallet = _amount;
    }

    function flipSale() external onlyOwner {
        mintEnabled = !mintEnabled;
    }

    function withdraw() external onlyOwner {
        (bool success, ) = payable(msg.sender).call{
            value: address(this).balance
        }("");
        require(success, "Transfer failed.");
    }
}
