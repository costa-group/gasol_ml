// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;
import "openzeppelin/contracts/token/ERC20/ERC20.sol";

interface IStakingRewards {
    /// ### Structs
    struct RewardDistribution {
        uint256 totalStake;
        uint256 rewardPerToken; // Needs to be boosted by 1e18 before storing so we don't lose precision
    }
    // If totalstake is 0, first staker gets everything. When ejecting, or withdrawing, and totalstake becomes 0, reward per token should also be set to 0.
    struct UserStake {
        uint256 stakedAmount;
        uint256 rewardEntry;
        uint256 pendingRewards;
        uint256 timeStaked;
    }

    /// ### Events
    event Stake(address indexed user, address indexed daoToken, uint256 amount);
    event Unstake(
        address indexed user,
        address indexed daoToken,
        uint256 amount
    );
    event ClaimRewards(
        address indexed user,
        address indexed daoToken,
        uint256 amount
    );
    event Distribution(address indexed daoToken, uint256 amount);
    event Eject(
        address indexed sender,
        address indexed daoToken,
        uint256 amount
    );

    /// ### Functions
    /// notice Updates the lock up period in state
    /// param _lockupPeriod The new 
    function setLockupPeriod(uint256 _lockupPeriod) external;

    /// notice Stakes amount of dao token into the contract
    /// param _daoToken The governance token of the dao to be staked.
    /// param _amount The amount of governance token to be staked
    function stake(address _daoToken, uint256 _amount) external;

    /// notice Stakes amount of dao token into the contract for a user
    /// param _user The user the tokens are being staked on behalf for
    /// param _daoToken The governance token of the dao to be staked.
    /// param _amount The amount of governance token to be staked
    function stakeOnBehalf(address _user, address _daoToken, uint256 _amount) external;

    /// notice Unstakes and transfers out a given amount of dao governance tokens
    /// dev This function will also claim any outstanding rewards for the user
    /// param _daoToken The dao governance token to unstake
    /// param _amount The amount to remove
    /// param _to The destination for the dao tokens and rewards
    function unstake(
        address _daoToken,
        uint256 _amount,
        address _to
    ) external;

    /// notice Claims all outstanding rewards for the user for the specified dao
    /// param _daoToken The dao to claim rewards for.
    /// param _to The destination for the rewards
    function claimRewards(address _daoToken, address _to) external;

    /// notice Withdraws the user's dao governance tokens without claiming any outstanding rewards
    /// dev To be used as an emergency exit hatch for users. This will permanently lock any outstanding rewards for the user in the contract.
    /// param _daoToken The dao governance token to eject.
    /// param _to The destination wallet for the ejected tokens
    function emergencyEject(address _daoToken, address _to) external;

    /// notice Updates the dao distribution to include an additional amount
    /// dev This should pull tokens from the caller's account
    /// dev This should be coded in such a way as to not require any kind of authorization other than providing an amount of reward tokens.
    /// dev This should handle cases where there aren't any tokens staked: first staker gets everything.
    /// param _daoToken The dao to distribute rewards to
    /// param _amount The amount of reward token to distribute
    function distributeRewards(address _daoToken, uint256 _amount) external;

    /// notice Returns the amount of claimable reward tokens for a user for a given dao
    /// param _user The user who staked the tokens
    /// param _daoToken The governance token of the dao the user has staked
    /// return rewardAmount The amount of the reward token that the user is entitled to
    function pendingRewards(address _user, address _daoToken)
        external
        view
        returns (uint256 rewardAmount);

    /// ### Autogenerated getter functions

    function lockupPeriod() external view returns (uint256);

    function rewardToken() external view returns (ERC20 rewardToken);

    function daoRewards(address _daoToken)
        external
        view
        returns (uint256 totalStake, uint256 rewardPerToken);

    function userStakes(address _daoToken, address _user)
        external
        view
        returns (
            uint256 stakedAmount,
            uint256 rewardEntry,
            uint256 pendingRewards,
            uint256 timeStaked
        );
}
